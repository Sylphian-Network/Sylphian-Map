<?xml version="1.0" encoding="utf-8"?>
<templates>
  <template type="admin" title="sylphian_map_export" version_id="1000710" version_string="1.0.7 Alpha"><![CDATA[<xf:title>{{ phrase('sylphian_map_export_map_data') }}</xf:title>

<xf:form action="{{ link('sylphian_map/export') }}" class="block">
    <div class="block-container">
        <div class="block-body">
            <xf:radiorow name="format" value="json" label="{{ phrase('sylphian_map_export_format') }}">
                <xf:option value="json">JSON</xf:option>
                <xf:option value="sql">SQL</xf:option>
            </xf:radiorow>
        </div>
        <xf:submitrow icon="export" submit="{{ phrase('export') }}" />
    </div>
</xf:form>]]></template>
  <template type="admin" title="sylphian_map_import" version_id="1000710" version_string="1.0.7 Alpha"><![CDATA[<xf:title>{{ phrase('sylphian_map_import_map_data') }}</xf:title>

<xf:form action="{{ link('sylphian_map/import') }}" class="block" upload="true" ajax="false">
    <div class="block-container">
        <div class="block-body">
            <xf:uploadrow name="import_file" 
                          label="{{ phrase('sylphian_map_upload_file') }}" 
                          accept=".json,.sql"
                          required="required" />
                
            <xf:inforow>
                {{ phrase('sylphian_map_import_file_description') }}
            </xf:inforow>
        </div>
        
        <xf:submitrow icon="import" submit="{{ phrase('sylphian_map_import') }}" />
    </div>
</xf:form>]]></template>
  <template type="admin" title="sylphian_map_option_macros" version_id="1000710" version_string="1.0.7 Alpha"><![CDATA[<xf:macro name="option_form_block" arg-group="" arg-options="!" arg-containerBeforeHtml="">
	<xf:set var="$hundred" value="0" />

	<xf:if is="$options is not empty">
		<xf:form action="{{ link('options/update') }}" ajax="true" class="block">
			{{ $containerBeforeHtml|raw }}
			<div class="block-container">	
				<h2 class="block-tabHeader tabs" data-xf-init="tabs" role="tab">
					<a class="tabs-tab is-active" role="tablist" tabindex="0" aria-controls="mapControlOptions">Map control options</a>
					<a class="tabs-tab" role="tablist" tabindex="0" aria-controls="mapThreadOptions">Thread options</a>
				</h2>
				
				<ul class="tabPanes">
					<li class="is-active" role="tabpanel" id="mapControlOptions">
						<div class="block-body">
							<xf:foreach loop="$options" value="$option">
								<xf:if is="$option.Relations.sylphian_map.display_order < 2000">
									<xf:if is="$group">
										<xf:set var="$curHundred" value="{{ floor($option.Relations.{$group.group_id}.display_order / 100) }}" />
										<xf:if is="{{ $curHundred > $hundred }}">
											<xf:set var="$hundred" value="{$curHundred}" />
											<hr class="formRowSep" />
										</xf:if>
									</xf:if>

									<xf:macro template="option_macros" name="option_row" arg-group="{$group}" arg-option="{$option}" />
								</xf:if>
							</xf:foreach>
							
							<xf:formrow label="">
								<xf:button href="{{ link('sylphian_map/export') }}" icon="export" overlay="true">{{ phrase('sylphian_map_export_data') }}</xf:button>
								<xf:button href="{{ link('sylphian_map/import') }}" icon="import" overlay="true">{{ phrase('import_data') }}</xf:button>
							</xf:formrow>
						</div>
					</li>
					
					<li role="tabpanel" id="mapThreadOptions">
						<div class="block-body">
							<xf:foreach loop="$options" value="$option">
								<xf:if is="$option.Relations.sylphian_map.display_order >= 2000">
									<xf:if is="$group">
										<xf:set var="$curHundred" value="{{ floor($option.Relations.{$group.group_id}.display_order / 100) }}" />
										<xf:if is="{{ $curHundred > $hundred }}">
											<xf:set var="$hundred" value="{$curHundred}" />
											<hr class="formRowSep" />
										</xf:if>
									</xf:if>

									<xf:macro template="option_macros" name="option_row" arg-group="{$group}" arg-option="{$option}" />
								</xf:if>
							</xf:foreach>
						</div>
					</li>
				</ul>
				
				<xf:submitrow sticky="true" icon="save" />
			</div>
		</xf:form>
	</xf:if>
</xf:macro>]]></template>
  <template type="admin" title="widget_def_options_sylphian_map_events" version_id="1000710" version_string="1.0.7 Alpha"><![CDATA[]]></template>
  <template type="public" title="_help_page_map_guide" version_id="1000970" version_string="1.0.9"><![CDATA[<div class="block">
    <div class="block-container">
        <h3 class="block-header">What is a map marker?</h3>
        <div class="block-body block-row">
            <p>
                Map markers are locations on the <a href="{{ link('map') }}">community map</a>.
                Each marker includes some <b>required details</b> and several <b>optional extras</b> to better describe the place or event.
            </p>

            <h4>Required fields</h4>
            <ul>
                <li><b>Title</b> – The name of the place or event.</li>
                <li><b>Type</b> – Specify what kind of marker it is (e.g. event, business, member).</li>
                <li><b>Latitude & Longitude</b> – The coordinates where the marker will appear.</li>
            </ul>

            <h4>Optional fields</h4>
            <ul>
                <li><b>Content</b> – A description, notes, or further details about the marker.</li>
                <li><b>Address</b> – Street address or location reference.</li>
                <li><b>Icon / Variant / Colour</b> – Customise how the marker appears on the map.</li>
                <li><b>Marker colour</b> – Highlight different categories with distinct colours.</li>
                <li><b>Create a thread</b> – Automatically start a discussion linked to this marker.</li>
                <li><b>Lock thread replies</b> – Prevent replies if you’d like the thread to be read-only.</li>
                <li><b>Start / End date</b> – Show when an event begins and finishes.</li>
            </ul>

            <h4>Example</h4>
            <p>
                Adding a marker for <i>“Community Meet-up”</i> might look like this:
            </p>
            <ul>
                <li>Title: Community Meet-up</li>
                <li>Type: Event</li>
                <li>Latitude/Longitude: 51.5072, -0.1276</li>
                <li>Content: Join us for coffee and a chat!</li>
                <li>Start Date: 5 October 2025, 6:00pm</li>
                <li>End Date: 5 October 2025, 7:00pm</li>
            </ul>
        </div>
    </div>
</div>

<div class="block">
    <div class="block-container">
        <h3 class="block-header">Suggesting a marker</h3>
        <div class="block-body block-row">
            <p>
                Suggesting a marker is simple: go to the <a href="{{ link('map') }}">community map</a> and click
                the <b>Suggest marker</b> button. A form will appear where you can enter the details of the place or event
                you’d like to add.
            </p>

            <p>
                After adding all the details, click <b>Save</b> to submit your marker for review.
                A moderator (or another approved user) will review your submission before it appears on the map.
            </p>
        </div>
    </div>
</div>

<div class="block">
    <div class="block-container">
        <h3 class="block-header">Event markers</h3>
        <div class="block-body block-row">
            <p>
                Event markers behave a little differently from other types of markers.
                They can animate on the map to make it easier to spot upcoming or ongoing events:
            </p>
            <ul>
                <li><b>Active events</b> – Events currently in progress will <i>pulse</i> on the map,
                    drawing attention so you can find them at a glance.</li>
                <li><b>Upcoming events</b> – Events starting within the next 7 days will <i>bounce</i>
                    gently to show they’re about to happen.</li>
                <li><b>Past events</b> – When an event has ended, its marker will disappear from the map
                    (or be hidden automatically during clean-up).</li>
            </ul>
            <p>
                This makes it easy to see not only where events are happening,
                but also which ones you can still attend soon.
            </p>
        </div>
    </div>
</div>

<div class="block">
    <div class="block-container">
        <h3 class="block-header">Events widget</h3>
        <div class="block-body block-row">
            <p>
                The events widget gives you a quick way to see what’s happening in the community
                without needing to browse the whole map. It lists the most recent event markers that
                are currently active or coming up soon.
            </p>
            <ul>
                <li><b>Active events</b> – If an event is in progress right now, it will appear at the top of the widget.</li>
                <li><b>Upcoming events</b> – Events that are starting soon will also be shown, ordered by start date.</li>
                <li><b>Quick links</b> – Each event entry includes a link to the full discussion thread if one was created.</li>
            </ul>
            <p>
                This makes the widget a handy “at a glance” view of what’s happening in the community.
            </p>
        </div>
    </div>
</div>

<div class="block">
    <div class="block-container">
        <h3 class="block-header">FAQ</h3>
        <div class="block-body block-row">
            <p><b>Can I edit my marker after submitting?</b><br>
                Not directly, you can request an update from a moderator or suggest a new version.</p>
            <hr>
            <p><b>Why isn’t my event showing on the map?</b><br>
                It may be waiting for approval or the event date may have passed.</p>
            <hr>
            <p><b>What should I add to the map?</b><br>
                {{ phrase('sylphian_map_help_page_what_to_add_to_map') }}</p>
        </div>
    </div>
</div>]]></template>
  <template type="public" title="leaflet.less" version_id="1000010" version_string="1.0.0 Alpha"><![CDATA[/* required styles */

.leaflet-pane,
.leaflet-tile,
.leaflet-marker-icon,
.leaflet-marker-shadow,
.leaflet-tile-container,
.leaflet-pane > svg,
.leaflet-pane > canvas,
.leaflet-zoom-box,
.leaflet-image-layer,
.leaflet-layer {
	position: absolute;
	left: 0;
	top: 0;
	}
.leaflet-container {
	overflow: hidden;
	}
.leaflet-tile,
.leaflet-marker-icon,
.leaflet-marker-shadow {
	-webkit-user-select: none;
	   -moz-user-select: none;
	        user-select: none;
	  -webkit-user-drag: none;
	}
/* Prevents IE11 from highlighting tiles in blue */
.leaflet-tile::selection {
	background: transparent;
}
/* Safari renders non-retina tile on retina better with this, but Chrome is worse */
.leaflet-safari .leaflet-tile {
	image-rendering: -webkit-optimize-contrast;
	}
/* hack that prevents hw layers "stretching" when loading new tiles */
.leaflet-safari .leaflet-tile-container {
	width: 1600px;
	height: 1600px;
	-webkit-transform-origin: 0 0;
	}
.leaflet-marker-icon,
.leaflet-marker-shadow {
	display: block;
	}
/* .leaflet-container svg: reset svg max-width decleration shipped in Joomla! (joomla.org) 3.x */
/* .leaflet-container img: map is broken in FF if you have max-width: 100% on tiles */
.leaflet-container .leaflet-overlay-pane svg {
	max-width: none !important;
	max-height: none !important;
	}
.leaflet-container .leaflet-marker-pane img,
.leaflet-container .leaflet-shadow-pane img,
.leaflet-container .leaflet-tile-pane img,
.leaflet-container img.leaflet-image-layer,
.leaflet-container .leaflet-tile {
	max-width: none !important;
	max-height: none !important;
	width: auto;
	padding: 0;
	}

.leaflet-container img.leaflet-tile {
	/* See: https://bugs.chromium.org/p/chromium/issues/detail?id=600120 */
	mix-blend-mode: plus-lighter;
}

.leaflet-container.leaflet-touch-zoom {
	-ms-touch-action: pan-x pan-y;
	touch-action: pan-x pan-y;
	}
.leaflet-container.leaflet-touch-drag {
	-ms-touch-action: pinch-zoom;
	/* Fallback for FF which doesn't support pinch-zoom */
	touch-action: none;
	touch-action: pinch-zoom;
}
.leaflet-container.leaflet-touch-drag.leaflet-touch-zoom {
	-ms-touch-action: none;
	touch-action: none;
}
.leaflet-container {
	-webkit-tap-highlight-color: transparent;
}
.leaflet-container a {
	-webkit-tap-highlight-color: rgba(51, 181, 229, 0.4);
}
.leaflet-tile {
	filter: inherit;
	visibility: hidden;
	}
.leaflet-tile-loaded {
	visibility: inherit;
	}
.leaflet-zoom-box {
	width: 0;
	height: 0;
	-moz-box-sizing: border-box;
	     box-sizing: border-box;
	z-index: 800;
	}
/* workaround for https://bugzilla.mozilla.org/show_bug.cgi?id=888319 */
.leaflet-overlay-pane svg {
	-moz-user-select: none;
	}

.leaflet-pane         { z-index: 400; }

.leaflet-tile-pane    { z-index: 200; }
.leaflet-overlay-pane { z-index: 400; }
.leaflet-shadow-pane  { z-index: 500; }
.leaflet-marker-pane  { z-index: 600; }
.leaflet-tooltip-pane   { z-index: 650; }
.leaflet-popup-pane   { z-index: 700; }

.leaflet-map-pane canvas { z-index: 100; }
.leaflet-map-pane svg    { z-index: 200; }

.leaflet-vml-shape {
	width: 1px;
	height: 1px;
	}
.lvml {
	behavior: url(#default#VML);
	display: inline-block;
	position: absolute;
	}


/* control positioning */

.leaflet-control {
	position: relative;
	z-index: 800;
	pointer-events: visiblePainted; /* IE 9-10 doesn't have auto */
	pointer-events: auto;
	}
.leaflet-top,
.leaflet-bottom {
	position: absolute;
	z-index: 1000;
	pointer-events: none;
	}
.leaflet-top {
	top: 0;
	}
.leaflet-right {
	right: 0;
	}
.leaflet-bottom {
	bottom: 0;
	}
.leaflet-left {
	left: 0;
	}
.leaflet-control {
	float: left;
	clear: both;
	}
.leaflet-right .leaflet-control {
	float: right;
	}
.leaflet-top .leaflet-control {
	margin-top: 10px;
	}
.leaflet-bottom .leaflet-control {
	margin-bottom: 10px;
	}
.leaflet-left .leaflet-control {
	margin-left: 10px;
	}
.leaflet-right .leaflet-control {
	margin-right: 10px;
	}


/* zoom and fade animations */

.leaflet-fade-anim .leaflet-popup {
	opacity: 0;
	-webkit-transition: opacity 0.2s linear;
	   -moz-transition: opacity 0.2s linear;
	        transition: opacity 0.2s linear;
	}
.leaflet-fade-anim .leaflet-map-pane .leaflet-popup {
	opacity: 1;
	}
.leaflet-zoom-animated {
	-webkit-transform-origin: 0 0;
	    -ms-transform-origin: 0 0;
	        transform-origin: 0 0;
	}
svg.leaflet-zoom-animated {
	will-change: transform;
}

.leaflet-zoom-anim .leaflet-zoom-animated {
	-webkit-transition: -webkit-transform 0.25s cubic-bezier(0,0,0.25,1);
	   -moz-transition:    -moz-transform 0.25s cubic-bezier(0,0,0.25,1);
	        transition:         transform 0.25s cubic-bezier(0,0,0.25,1);
	}
.leaflet-zoom-anim .leaflet-tile,
.leaflet-pan-anim .leaflet-tile {
	-webkit-transition: none;
	   -moz-transition: none;
	        transition: none;
	}

.leaflet-zoom-anim .leaflet-zoom-hide {
	visibility: hidden;
	}


/* cursors */

.leaflet-interactive {
	cursor: pointer;
	}
.leaflet-grab {
	cursor: -webkit-grab;
	cursor:    -moz-grab;
	cursor:         grab;
	}
.leaflet-crosshair,
.leaflet-crosshair .leaflet-interactive {
	cursor: crosshair;
	}
.leaflet-popup-pane,
.leaflet-control {
	cursor: auto;
	}
.leaflet-dragging .leaflet-grab,
.leaflet-dragging .leaflet-grab .leaflet-interactive,
.leaflet-dragging .leaflet-marker-draggable {
	cursor: move;
	cursor: -webkit-grabbing;
	cursor:    -moz-grabbing;
	cursor:         grabbing;
	}

/* marker & overlays interactivity */
.leaflet-marker-icon,
.leaflet-marker-shadow,
.leaflet-image-layer,
.leaflet-pane > svg path,
.leaflet-tile-container {
	pointer-events: none;
	}

.leaflet-marker-icon.leaflet-interactive,
.leaflet-image-layer.leaflet-interactive,
.leaflet-pane > svg path.leaflet-interactive,
svg.leaflet-image-layer.leaflet-interactive path {
	pointer-events: visiblePainted; /* IE 9-10 doesn't have auto */
	pointer-events: auto;
	}

/* visual tweaks */

.leaflet-container {
	background: #ddd;
	outline-offset: 1px;
	}
.leaflet-container a {
	color: #0078A8;
	}
.leaflet-zoom-box {
	border: 2px dotted #38f;
	background: rgba(255,255,255,0.5);
	}


/* general typography */
.leaflet-container {
	font-family: "Helvetica Neue", Arial, Helvetica, sans-serif;
	font-size: 12px;
	font-size: 0.75rem;
	line-height: 1.5;
	}


/* general toolbar styles */

.leaflet-bar {
	box-shadow: 0 1px 5px rgba(0,0,0,0.65);
	border-radius: 4px;
	}
.leaflet-bar a {
	background-color: #fff;
	border-bottom: 1px solid #ccc;
	width: 26px;
	height: 26px;
	line-height: 26px;
	display: block;
	text-align: center;
	text-decoration: none;
	color: black;
	}
.leaflet-bar a,
.leaflet-control-layers-toggle {
	background-position: 50% 50%;
	background-repeat: no-repeat;
	display: block;
	}
.leaflet-bar a:hover,
.leaflet-bar a:focus {
	background-color: #f4f4f4;
	}
.leaflet-bar a:first-child {
	border-top-left-radius: 4px;
	border-top-right-radius: 4px;
	}
.leaflet-bar a:last-child {
	border-bottom-left-radius: 4px;
	border-bottom-right-radius: 4px;
	border-bottom: none;
	}
.leaflet-bar a.leaflet-disabled {
	cursor: default;
	background-color: #f4f4f4;
	color: #bbb;
	}

.leaflet-touch .leaflet-bar a {
	width: 30px;
	height: 30px;
	line-height: 30px;
	}
.leaflet-touch .leaflet-bar a:first-child {
	border-top-left-radius: 2px;
	border-top-right-radius: 2px;
	}
.leaflet-touch .leaflet-bar a:last-child {
	border-bottom-left-radius: 2px;
	border-bottom-right-radius: 2px;
	}

/* zoom control */

.leaflet-control-zoom-in,
.leaflet-control-zoom-out {
	font: bold 18px 'Lucida Console', Monaco, monospace;
	text-indent: 1px;
	}

.leaflet-touch .leaflet-control-zoom-in, .leaflet-touch .leaflet-control-zoom-out  {
	font-size: 22px;
	}


/* layers control */

.leaflet-control-layers {
	box-shadow: 0 1px 5px rgba(0,0,0,0.4);
	background: #fff;
	border-radius: 5px;
	}
.leaflet-control-layers-toggle {
	background-image: url(images/layers.png);
	width: 36px;
	height: 36px;
	}
.leaflet-retina .leaflet-control-layers-toggle {
	background-image: url(images/layers-2x.png);
	background-size: 26px 26px;
	}
.leaflet-touch .leaflet-control-layers-toggle {
	width: 44px;
	height: 44px;
	}
.leaflet-control-layers .leaflet-control-layers-list,
.leaflet-control-layers-expanded .leaflet-control-layers-toggle {
	display: none;
	}
.leaflet-control-layers-expanded .leaflet-control-layers-list {
	display: block;
	position: relative;
	}
.leaflet-control-layers-expanded {
	padding: 6px 10px 6px 6px;
	color: #333;
	background: #fff;
	}
.leaflet-control-layers-scrollbar {
	overflow-y: scroll;
	overflow-x: hidden;
	padding-right: 5px;
	}
.leaflet-control-layers-selector {
	margin-top: 2px;
	position: relative;
	top: 1px;
	}
.leaflet-control-layers label {
	display: block;
	font-size: 13px;
	font-size: 1.08333em;
	}
.leaflet-control-layers-separator {
	height: 0;
	border-top: 1px solid #ddd;
	margin: 5px -10px 5px -6px;
	}

/* Default icon URLs */
.leaflet-default-icon-path { /* used only in path-guessing heuristic, see L.Icon.Default */
	background-image: url(images/marker-icon.png);
	}


/* attribution and scale controls */

.leaflet-container .leaflet-control-attribution {
	background: #fff;
	background: rgba(255, 255, 255, 0.8);
	margin: 0;
	}
.leaflet-control-attribution,
.leaflet-control-scale-line {
	padding: 0 5px;
	color: #333;
	line-height: 1.4;
	}
.leaflet-control-attribution a {
	text-decoration: none;
	}
.leaflet-control-attribution a:hover,
.leaflet-control-attribution a:focus {
	text-decoration: underline;
	}
.leaflet-attribution-flag {
	display: inline !important;
	vertical-align: baseline !important;
	width: 1em;
	height: 0.6669em;
	}
.leaflet-left .leaflet-control-scale {
	margin-left: 5px;
	}
.leaflet-bottom .leaflet-control-scale {
	margin-bottom: 5px;
	}
.leaflet-control-scale-line {
	border: 2px solid #777;
	border-top: none;
	line-height: 1.1;
	padding: 2px 5px 1px;
	white-space: nowrap;
	-moz-box-sizing: border-box;
	     box-sizing: border-box;
	background: rgba(255, 255, 255, 0.8);
	text-shadow: 1px 1px #fff;
	}
.leaflet-control-scale-line:not(:first-child) {
	border-top: 2px solid #777;
	border-bottom: none;
	margin-top: -2px;
	}
.leaflet-control-scale-line:not(:first-child):not(:last-child) {
	border-bottom: 2px solid #777;
	}

.leaflet-touch .leaflet-control-attribution,
.leaflet-touch .leaflet-control-layers,
.leaflet-touch .leaflet-bar {
	box-shadow: none;
	}
.leaflet-touch .leaflet-control-layers,
.leaflet-touch .leaflet-bar {
	border: 2px solid rgba(0,0,0,0.2);
	background-clip: padding-box;
	}


/* popup */

.leaflet-popup {
	position: absolute;
	text-align: center;
	margin-bottom: 20px;
	}
.leaflet-popup-content-wrapper {
	padding: 1px;
	text-align: left;
	border-radius: 12px;
	}
.leaflet-popup-content {
	margin: 13px 24px 13px 20px;
	line-height: 1.3;
	font-size: 13px;
	font-size: 1.08333em;
	min-height: 1px;
	}
.leaflet-popup-content p {
	margin: 17px 0;
	margin: 1.3em 0;
	}
.leaflet-popup-tip-container {
	width: 40px;
	height: 20px;
	position: absolute;
	left: 50%;
	margin-top: -1px;
	margin-left: -20px;
	overflow: hidden;
	pointer-events: none;
	}
.leaflet-popup-tip {
	width: 17px;
	height: 17px;
	padding: 1px;

	margin: -10px auto 0;
	pointer-events: auto;

	-webkit-transform: rotate(45deg);
	   -moz-transform: rotate(45deg);
	    -ms-transform: rotate(45deg);
	        transform: rotate(45deg);
	}
.leaflet-popup-content-wrapper,
.leaflet-popup-tip {
	background: white;
	color: #333;
	box-shadow: 0 3px 14px rgba(0,0,0,0.4);
	}
.leaflet-container a.leaflet-popup-close-button {
	position: absolute;
	top: 0;
	right: 0;
	border: none;
	text-align: center;
	width: 24px;
	height: 24px;
	font: 16px/24px Tahoma, Verdana, sans-serif;
	color: #757575;
	text-decoration: none;
	background: transparent;
	}
.leaflet-container a.leaflet-popup-close-button:hover,
.leaflet-container a.leaflet-popup-close-button:focus {
	color: #585858;
	}
.leaflet-popup-scrolled {
	overflow: auto;
	}

.leaflet-oldie .leaflet-popup-content-wrapper {
	-ms-zoom: 1;
	}
.leaflet-oldie .leaflet-popup-tip {
	width: 24px;
	margin: 0 auto;

	-ms-filter: "progid:DXImageTransform.Microsoft.Matrix(M11=0.70710678, M12=0.70710678, M21=-0.70710678, M22=0.70710678)";
	filter: progid:DXImageTransform.Microsoft.Matrix(M11=0.70710678, M12=0.70710678, M21=-0.70710678, M22=0.70710678);
	}

.leaflet-oldie .leaflet-control-zoom,
.leaflet-oldie .leaflet-control-layers,
.leaflet-oldie .leaflet-popup-content-wrapper,
.leaflet-oldie .leaflet-popup-tip {
	border: 1px solid #999;
	}


/* div icon */

.leaflet-div-icon {
	background: #fff;
	border: 1px solid #666;
	}


/* Tooltip */
/* Base styles for the element that has a tooltip */
.leaflet-tooltip {
	position: absolute;
	padding: 6px;
	background-color: #fff;
	border: 1px solid #fff;
	border-radius: 3px;
	color: #222;
	white-space: nowrap;
	-webkit-user-select: none;
	-moz-user-select: none;
	-ms-user-select: none;
	user-select: none;
	pointer-events: none;
	box-shadow: 0 1px 3px rgba(0,0,0,0.4);
	}
.leaflet-tooltip.leaflet-interactive {
	cursor: pointer;
	pointer-events: auto;
	}
.leaflet-tooltip-top:before,
.leaflet-tooltip-bottom:before,
.leaflet-tooltip-left:before,
.leaflet-tooltip-right:before {
	position: absolute;
	pointer-events: none;
	border: 6px solid transparent;
	background: transparent;
	content: "";
	}

/* Directions */

.leaflet-tooltip-bottom {
	margin-top: 6px;
}
.leaflet-tooltip-top {
	margin-top: -6px;
}
.leaflet-tooltip-bottom:before,
.leaflet-tooltip-top:before {
	left: 50%;
	margin-left: -6px;
	}
.leaflet-tooltip-top:before {
	bottom: 0;
	margin-bottom: -12px;
	border-top-color: #fff;
	}
.leaflet-tooltip-bottom:before {
	top: 0;
	margin-top: -12px;
	margin-left: -6px;
	border-bottom-color: #fff;
	}
.leaflet-tooltip-left {
	margin-left: -6px;
}
.leaflet-tooltip-right {
	margin-left: 6px;
}
.leaflet-tooltip-left:before,
.leaflet-tooltip-right:before {
	top: 50%;
	margin-top: -6px;
	}
.leaflet-tooltip-left:before {
	right: 0;
	margin-right: -12px;
	border-left-color: #fff;
	}
.leaflet-tooltip-right:before {
	left: 0;
	margin-left: -12px;
	border-right-color: #fff;
	}

/* Printing */

@media print {
	/* Prevent printers from removing background-images of controls. */
	.leaflet-control {
		-webkit-print-color-adjust: exact;
		print-color-adjust: exact;
		}
	}]]></template>
  <template type="public" title="leaflet_awesome_markers.less" version_id="1000020" version_string="1.0.2"><![CDATA[/*
    Author: L. Voogdt
    License: MIT
    Version: 1.0
    Modified to work with XenForo SVG icons
    */

    /* Marker setup */
    .awesome-marker {
      background: url('/js/sylphian/map/leaflet/images/markers-soft.png') no-repeat 0 0;
      width: 35px;
      height: 46px;
      position: absolute;
      left: 0;
      top: 0;
      display: block;
      text-align: center;
    }

    .awesome-marker-shadow {
      background: url('/js/sylphian/map/leaflet/images/markers-shadow.png') no-repeat 0 0;
      width: 36px;
      height: 16px;
    }

    /* Retina displays */
    @media (min--moz-device-pixel-ratio: 1.5),(-o-min-device-pixel-ratio: 3/2),
    (-webkit-min-device-pixel-ratio: 1.5),(min-device-pixel-ratio: 1.5),(min-resolution: 1.5dppx) {
     .awesome-marker {
      background-image: url('/js/sylphian/map/leaflet/images/markers-soft@2x.png');
      background-size: 720px 46px;
     }
     .awesome-marker-shadow {
      background-image: url('/js/sylphian/map/leaflet/images/markers-shadow@2x.png');
      background-size: 35px 16px;
     }
    }

    /* XenForo SVG icon styles */
    .awesome-marker .fa--xf {
      margin-top: 10px;
      display: inline-block;
      font-size: 16px;
      line-height: 16px;
      width: 16px;
      height: 16px;
    }

    .awesome-marker .fa--xf svg {
      width: 1em;
      height: 1em;
      vertical-align: -0.125em;
      font-size: inherit;
      display: inline-block;
      fill: currentColor;
    }


    .awesome-marker .icon-white {
      color: #fff;
    }

    .awesome-marker .icon-black {
      color: #000;
    }

    /* Colors */
    .awesome-marker-icon-red {
      background-position: 0 0;
    }

    .awesome-marker-icon-darkred {
      background-position: -180px 0;
    }

    .awesome-marker-icon-lightred {
      background-position: -360px 0;
    }

    .awesome-marker-icon-orange {
      background-position: -36px 0;
    }

    .awesome-marker-icon-beige {
      background-position: -396px 0;
    }

    .awesome-marker-icon-green {
      background-position: -72px 0;
    }

    .awesome-marker-icon-darkgreen {
      background-position: -252px 0;
    }

    .awesome-marker-icon-lightgreen {
      background-position: -432px 0;
    }

    .awesome-marker-icon-blue {
      background-position: -108px 0;
    }

    .awesome-marker-icon-darkblue {
      background-position: -216px 0;
    }

    .awesome-marker-icon-lightblue {
      background-position: -468px 0;
    }

    .awesome-marker-icon-purple {
      background-position: -144px 0;
    }

    .awesome-marker-icon-darkpurple {
      background-position: -288px 0;
    }

    .awesome-marker-icon-pink {
      background-position: -504px 0;
    }

    .awesome-marker-icon-cadetblue {
      background-position: -324px 0;
    }

    .awesome-marker-icon-white {
      background-position: -576px 0;
    }

    .awesome-marker-icon-gray {
      background-position: -648px 0;
    }

    .awesome-marker-icon-lightgray {
      background-position: -612px 0;
    }

    .awesome-marker-icon-black {
      background-position: -682px 0;
    }]]></template>
  <template type="public" title="sylphian_map" version_id="1000710" version_string="1.0.7 Alpha"><![CDATA[<xf:title>{{ phrase('nav.map') }}</xf:title>

<xf:css src="public:leaflet.less" />
<xf:js src="sylphian/map/leaflet/leaflet.js" min="1" addon="Sylphian/Map" />
<xf:css src="public:leaflet_awesome_markers.less" />
<xf:js src="sylphian/map/leaflet/leaflet.awesome-markers.js" min="1" addon="Sylphian/Map" />

<xf:css src="public:sylphian_map.less" />

<xf:if is="$xf.visitor.hasPermission('general', 'suggestMarkers')">
	<xf:pageaction>
		<xf:button href="{{ link('map/suggest') }}" 
					class="button--primary" 
					overlay="true">
			<xf:fa icon="fa-lightbulb" /> {{ phrase('sylphian_map_suggest_marker') }}
		</xf:button>
		
		<xf:if is="$canManageMarkers">
			<xf:button href="{{ link('map/management') }}" class="button">
				<xf:fa icon="fa-cog" /> {{ phrase('sylphian_map_manage_markers') }}
			</xf:button>
			
			<xf:if is="$xf.visitor.hasPermission('general', 'manageSuggestedMapMarkers')">
				<xf:button href="{{ link('map/suggestion') }}" class="button">
					{{ phrase('sylphian_map_manage_suggestion_markers') }}
					<xf:if is="$pendingSuggestions">
						<span class="badge badge--highlighted">{{ $pendingSuggestions }}</span>
					</xf:if>
				</xf:button>
			</xf:if>
		</xf:if>
	</xf:pageaction>
</xf:if>

<div class="block">
    <div class="block-container">
        <div class="block-body">
            <div id="mapContainer" style="height: 500px;"></div>
        </div>
		<div class="body-sidebar">
			<xf:widgetpos id="sylphian_map_sidebar" position="sidebar" />
		</div>
    </div>
</div>

<div class="block">
    <div class="block-container">
        <h2 class="block-header">{{ phrase('sylphian_map_filter_by_type') }}</h2>
        <div class="block-body">
            <div class="block-row">
                <div class="formRow">
                    <div class="formRow-main">
						<div id="mapIconFilters" class="inputChoices inputChoices--multiple">
							<xf:foreach loop="$markerTypes" value="$type">
								<label class="inputChoice">
									<input type="checkbox" 
										   class="js-typeFilter" 
										   value="{{ $type.name }}" 
										   checked="checked" 
										   data-type="{{ $type.name }}" />
									<span class="inputChoice-label">{{ $type.name }}</span>
								</label>
							</xf:foreach>
						</div>
                    </div>
                </div>
            </div>
            <div class="block-row formSubmitRow formSubmitRow--sticky formSubmitRow--simple">
                <div class="formSubmitRow-main">
                    <div class="formSubmitRow-controls">
                        <xf:button class="button--primary" id="applyMapFilters">{{ phrase('sylphian_map_apply_filters') }}</xf:button>
                        <xf:button class="button--link" id="resetMapFilters">{{ phrase('sylphian_map_reset_filters') }}</xf:button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<xf:js>
(function() {
    if (!window.L || !L.AwesomeMarkers) {
        console.error('Leaflet or AwesomeMarkers not loaded.');
        return;
    }

    const markersData = {{ $markers|json }};
    const markerTypes = {{ $markerTypes|json }};

    const map = L.map('mapContainer').setView(
        [{{ $mapCenter.lat }}, {{ $mapCenter.lng }}],
    {{ $startingZoom }}
);

    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        minZoom: {{ $minZoom }},
    maxZoom: {{ $maxZoom }},
    attribution: 'Map data from <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a>'
}).addTo(map);

    const markerGroup = L.layerGroup().addTo(map);
    const markersByType = {};

    markerTypes.forEach(type => {
        markersByType[type.name] = [];
    });

    markersData.forEach(markerData => {
        let animationState = null;

        if (markerData.start_date && markerData.end_date) {
            const now = Math.floor(Date.now() / 1000);
            const eventStart = markerData.start_date;
            const eventEnd = markerData.end_date;

            if (now >= eventStart && now <= eventEnd) {
                animationState = 'active';
            } else if (now < eventStart) {
                const timeUntilStart = eventStart - now;
                const sevenDaysInSeconds = 7 * 24 * 60 * 60;

                if (timeUntilStart <= sevenDaysInSeconds) {
                    animationState = 'upcoming';
                }
            }
        }

        const marker = L.marker(
            [markerData.lat, markerData.lng],
            {
                icon: L.AwesomeMarkers.icon({
                    icon: markerData.icon,
                    iconVar: markerData.iconVar,
                    iconColor: markerData.iconColor,
                    markerColor: markerData.markerColor,
                    animationState: animationState
                })
            }
        );

        let popupContent = `
				<strong>${markerData.title}</strong><br>
				${markerData.content}<br>
				<small style="color: #666;">
					<xf:fa icon="fa-map-marker-alt" /> ${markerData.lat}, ${markerData.lng}
				</small>
			`;

        if (markerData.start_date || markerData.end_date) {
            popupContent += `<br><small style="color: #666;">`;

            if (markerData.start_date) {
                const startDate = new Date(markerData.start_date * 1000);
                popupContent += `<xf:fa icon="fa-calendar-alt" /> Start: ${startDate.toLocaleString()}`;
            }

            if (markerData.start_date && markerData.end_date) {
                popupContent += `<br>`;
            }

            if (markerData.end_date) {
                const endDate = new Date(markerData.end_date * 1000);
                popupContent += `<xf:fa icon="fa-calendar-check" /> End: ${endDate.toLocaleString()}`;
            }

            popupContent += `</small>`;
        }

        if (markerData.thread_id) {
            popupContent += `
				<br><br>
				<a href="${markerData.thread_url}" class="button button--primary">
					{{ phrase('sylphian_map_view_discussion') }}
				</a>
			`;
        }

        marker.bindPopup(popupContent);

        if (!markersByType[markerData.type]) {
            markersByType[markerData.type] = [];
        }
        markersByType[markerData.type].push(marker);
    });

    function updateMarkers() {
        markerGroup.clearLayers();

        const selectedTypes = Array.from(
            document.querySelectorAll('.js-typeFilter:checked')
        ).map(cb => cb.dataset.type);

        selectedTypes.forEach(type => {
            if (markersByType[type]) {
                markersByType[type].forEach(marker => {
                    markerGroup.addLayer(marker);
                });
            }
        });
    }

    document.getElementById('applyMapFilters').addEventListener('click', function() {
        updateMarkers();
    });

    document.getElementById('resetMapFilters').addEventListener('click', function() {
        document.querySelectorAll('.js-typeFilter').forEach(cb => {
            cb.checked = true;
        });
        updateMarkers();
    });

    updateMarkers();
})();
</xf:js>]]></template>
  <template type="public" title="sylphian_map.less" version_id="1000710" version_string="1.0.7 Alpha"><![CDATA[#mapContainer {
    height: 500px;
    width: 100%;
    box-sizing: border-box;
    display: block;
	z-index: 1;
}

#mapIconFilters {
    display: flex;
    flex-wrap: wrap;
    gap: 15px;
    margin-bottom: 15px;
}

.map-icon-filter-item {
    display: flex;
    align-items: center;
    margin-bottom: 10px;
    padding: 4px 8px;
    border-radius: 3px;
    background-color: rgba(0, 0, 0, 0.02);
    border: 1px solid rgba(0, 0, 0, 0.05);
}

.map-icon-filter-item:hover {
    background-color: rgba(0, 0, 0, 0.04);
}

.map-icon-filter-item label {
    display: flex;
    align-items: center;
    cursor: pointer;
    font-size: 13px;
    color: @xf-textColor;
}

.map-icon-filter-item input[type="checkbox"] {
    margin-right: 8px;
}

.map-icon-filter-item .icon-preview {
    margin-left: 8px;
    width: 20px;
    height: 20px;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    background-color: rgba(0, 0, 0, 0.03);
    border-radius: 3px;
    padding: 3px;
}

.map-icon-filter-item .icon-preview svg {
    width: 2em;
    height: 2em;
}

@keyframes map-icon-heartbeat {
    0%, 100% { transform: scale(1); }
    10% { transform: scale(1.2); }
    20% { transform: scale(1); }
    30% { transform: scale(1.3); }
    40%, 100% { transform: scale(1); }
}

@keyframes map-icon-bounce {
    0%, 20%, 50%, 80%, 100% { transform: translateY(0); }
    40% { transform: translateY(-5px); }
    60% { transform: translateY(-3px); }
}

.map-icon-animation-upcoming {
    animation: map-icon-heartbeat 3s infinite ease-in-out;
    transform-origin: center;
    display: inline-block;
    will-change: transform;
}

.map-icon-animation-active {
    animation: map-icon-bounce 2s infinite ease-in-out;
    transform-origin: bottom center;
    display: inline-block;
    will-change: transform;
}]]></template>
  <template type="public" title="sylphian_map_management" version_id="1000710" version_string="1.0.7 Alpha"><![CDATA[<xf:title>{{ phrase('sylphian_map_manage_markers') }}</xf:title>

<div class="block">
    <div class="block-container">
        <div class="block-body">
            <xf:datalist>
                <xf:datarow rowtype="header">
                    <xf:cell>{{ phrase('title') }}</xf:cell>
                    <xf:cell>{{ phrase('type') }}</xf:cell>
                    <xf:cell>{{ phrase('icon') }}</xf:cell>
                    <xf:cell>{{ phrase('position') }}</xf:cell>
                    <xf:cell>{{ phrase('created_by') }}</xf:cell>
                    <xf:cell>{{ phrase('sylphian_map_update_date') }}</xf:cell>
                    <xf:cell>{{ phrase('sylphian_map_creation_date') }}</xf:cell>
                    <xf:cell>{{ phrase('status') }}</xf:cell>
                    <xf:cell></xf:cell>
                    <xf:cell></xf:cell>
                </xf:datarow>
        
                <xf:foreach loop="$allMarkers" value="$marker">
                    <xf:datarow>
                        <xf:main label="{{ $marker.title }}" />
                        <xf:cell>{{ $marker.type }}</xf:cell>
                        <xf:cell>
                            <xf:fa icon="fa-{{ $marker.icon }}" fw="true" /> 
                        </xf:cell>
                        <xf:cell>
                            <span title="{{ $marker.lat }}, {{ $marker.lng }}">
                                <xf:fa icon="fa-map-marker-alt" /> {{ $marker.lat | number(4) }}, {{ $marker.lng | number(4) }}
                            </span>
                        </xf:cell>
                        <xf:cell>
                            <xf:if is="$marker.User">
                                <xf:username user="$marker.User" />
                            <xf:else />
                                {{ phrase('unknown') }}
                            </xf:if>
                        </xf:cell>
                        <xf:cell>
                            {{ date($marker.update_date, 'M j, Y g:i A') }}
                        </xf:cell>
                        <xf:cell>
                            {{ date($marker.create_date, 'M j, Y g:i A') }}
                        </xf:cell>
                        <xf:cell>
                            <xf:if is="$marker.active">
                                <span class="label label--success">
                                    <xf:fa icon="fa-check" /> {{ phrase('sylphian_map_active') }}
                                </span>
                            <xf:else />
                                <span class="label label--warning">
                                    <xf:fa icon="fa-ban" /> {{ phrase('sylphian_map_inactive') }}
                                </span>
                            </xf:if>
                        </xf:cell>
                        <xf:action href="{{ link('map/edit', null, {'marker_id': $marker.marker_id}) }}" 
                                 overlay="true"
                                 title="{{ phrase('sylphian_map_edit_marker') }}">
                            <xf:fa icon="fa-edit" />
                        </xf:action>
                        <xf:action href="{{ link('map/delete', null, {'marker_id': $marker.marker_id}) }}"
                                  overlay="true"
                                  title="{{ phrase('sylphian_map_delete_marker') }}">
                            <xf:fa icon="fa-trash" />
                        </xf:action>
                    </xf:datarow>
                </xf:foreach>
            </xf:datalist>
            
            <div class="block-footer">
                <span class="block-footer-controls">
                    <xf:button href="{{ link('map/add') }}" 
                               class="button--primary" 
                               data-xf-click="overlay">
                        <xf:fa icon="fa-plus" /> {{ phrase('sylphian_map_add_new_marker') }}
                    </xf:button>
                </span>
            </div>
        </div>
    </div>
</div>

<div style="display: flex; justify-content: center;">
	<xf:pagenav page="{$page}" perpage="{$perPage}" total="{$total}" 
				link="map/management" 
				params="{$pageNavParams}"/>
</div>]]></template>
  <template type="public" title="sylphian_map_marker_form" version_id="1000810" version_string="1.0.8 Alpha"><![CDATA[<xf:title>{{ phrase_dynamic('sylphian_map_' . $formType) }}</xf:title>

<xf:js src="sylphian/map/form-geolocation-fetcher.js" min="1" addon="Sylphian/Map" />

<xf:form action="{{ $formAction }}" class="block" ajax="true">
    <div class="block-container">
        <h2 class="block-tabHeader tabs" data-xf-init="tabs" role="tablist">
            <a class="tabs-tab is-active" role="tab" tabindex="0" aria-controls="markerBasicInfo">{{ phrase('sylphian_map_basic_information') }}</a>
            <a class="tabs-tab" role="tab" tabindex="0" aria-controls="markerLocation">{{ phrase('location') }}</a>
            <a class="tabs-tab" role="tab" tabindex="0" aria-controls="markerAppearance">{{ phrase('sylphian_map_appearance') }}</a>
			<a class="tabs-tab" role="tab" tabindex="0" aria-controls="markerThread">{{ phrase('sylphian_map_thread_options') }}</a>
       		<a class="tabs-tab" role="tab" tabindex="0" aria-controls="markerTiming">{{ phrase('sylphian_map_event_timing') }}</a>
		</h2>

        <ul class="tabPanes">
            <!-- Basic Information Tab -->
            <li class="is-active" role="tabpanel" id="markerBasicInfo">
                <div class="block-body">
                    <xf:textboxrow name="title" value="{{ $entity.title }}"
                                   label="{{ phrase('title') }}"
                                   required="required"
                                   maxlength="100" />

                    <xf:textarearow name="content" value="{{ $entity.content }}"
                                    label="{{ phrase('content') }}"
                                    rows="3" />

                    <xf:textboxrow name="type" value="{{ $entity.type }}"
                                   label="{{ phrase('type') }}"
                                   required="required"
                                   maxlength="50"
								   explain="{{ phrase('sylphian_map_type_explanation') }}"/>
					
					<xf:if is="$formType != 'suggest' && $canManageActive">
                        <xf:checkboxrow explain="{{ phrase('sylphian_map_active_explanation') }}">
                            <xf:option name="active" selected="{{ $entity.active !== false }}"
                                       label="{{ phrase('sylphian_map_active') }}" />
                        </xf:checkboxrow>
                    </xf:if>
                </div>
            </li>

            <!-- Location Tab -->
            <li role="tabpanel" id="markerLocation">
                <div class="block-body">
                    <xf:numberboxrow name="lat" value="{{ $entity.lat }}"
                                     label="{{ phrase('sylphian_map_latitude') }}"
                                     required="required"
                                     step="any" />

                    <xf:numberboxrow name="lng" value="{{ $entity.lng }}"
                                     label="{{ phrase('sylphian_map_longitude') }}"
                                     required="required"
                                     step="any" />

					<xf:textboxrow name="address" value="{{ $entity.address }}"
								   label="{{ phrase('sylphian_map_address') }}"
								   placeholder="{{ phrase('sylphian_map_address_placeholder') }}"
								   maxlength="200" />

					<xf:if is="{{ $xf.visitor.hasPermission('general', 'sylphianMapAddressConvert') }}">
						<xf:formrow label="" explain="{{ phrase('sylphian_map_address_button_explanation') }}">
							<xf:button type="button" class="button--primary" id="geocode-address" data-xf-init="sylphian-geocode-button">
								<xf:fa icon="fa-search-location" />
								{{ phrase('sylphian_map_geocode_address') }}
							</xf:button>
							<span id="geocode-status" style="margin-left: 10px; display: none;">
								<xf:fa icon="fa-spinner fa-spin" /> {{ phrase('sylphian_map_geocoding_address') }}
							</span>
						</xf:formrow>
					</xf:if>
					
                    <xf:formrow label="" explain="{{ phrase('sylphian_map_current_location_button_explanation') }}">
                        <xf:button class="button--primary" id="use-my-location" data-xf-init="sylphian-location-button">
                            <xf:fa icon="fa-map-marker-alt" />
                            {{ phrase('sylphian_map_use_my_location') }}
                        </xf:button>
                        <span id="location-status" style="margin-left: 10px; display: none;">
                            <xf:fa icon="fa-spinner fa-spin" /> {{ phrase('sylphian_map_fetching_location') }}
                        </span>
                    </xf:formrow>
                </div>
            </li>

            <!-- Appearance Tab -->
            <li role="tabpanel" id="markerAppearance">
                <div class="block-body">
                    <xf:textboxrow name="icon" value="{{ $entity.icon }}"
                                   label="{{ phrase('icon') }}"
                                   maxlength="50"
                                   placeholder="home"
                                   explain="{{ phrase('sylphian_map_specify_fontawesome_icon_name') }}" />

                    <xf:selectrow name="icon_var" value="{{ $entity.icon_var ?: 'solid' }}"
                                  label="{{ phrase('sylphian_map_icon_variant') }}">
                        <xf:option value="light">{{ phrase('light') }}</xf:option>
                        <xf:option value="regular">{{ phrase('sylphian_map_regular') }}</xf:option>
                        <xf:option value="solid">{{ phrase('sylphian_map_solid') }}</xf:option>
                        <xf:option value="duotone">{{ phrase('sylphian_map_duotone') }}</xf:option>
                        <xf:option value="brands">{{ phrase('sylphian_map_brands') }}</xf:option>
                    </xf:selectrow>

                    <xf:textboxrow name="icon_color" value="{{ $entity.icon_color ?: 'black' }}"
                                   label="{{ phrase('sylphian_map_icon_color') }}"
                                   placeholder="black"
                                   maxlength="30"
								   explain="{{ phrase('sylphian_map_icon_color_explanation') }}" />

                    <xf:selectrow name="marker_color" value="{{ $entity.marker_color ?: 'blue' }}"
                                  label="{{ phrase('sylphian_map_marker_color') }}">
                        <xf:option value="red">Red</xf:option>
                        <xf:option value="darkred">Dark red</xf:option>
                        <xf:option value="lightred">Light red</xf:option>
                        <xf:option value="orange">Orange</xf:option>
                        <xf:option value="beige">Beige</xf:option>
                        <xf:option value="green">Green</xf:option>
                        <xf:option value="darkgreen">Dark green</xf:option>
                        <xf:option value="lightgreen">Light green</xf:option>
                        <xf:option value="blue">Blue</xf:option>
                        <xf:option value="darkblue">Dark blue</xf:option>
                        <xf:option value="lightblue">Light blue</xf:option>
                        <xf:option value="purple">Purple</xf:option>
                        <xf:option value="darkpurple">Dark purple</xf:option>
                        <xf:option value="pink">Pink</xf:option>
                        <xf:option value="cadetblue">Cadet blue</xf:option>
                        <xf:option value="white">White</xf:option>
                        <xf:option value="gray">Gray</xf:option>
                        <xf:option value="lightgray">Light gray</xf:option>
                        <xf:option value="black">Black</xf:option>
                    </xf:selectrow>
                </div>
            </li>
			
			<!-- Thread Options Tab -->
            <li role="tabpanel" id="markerThread">
                <div class="block-body">
                    <xf:if is="$xf.options.enableThreadCreation">
                        <xf:if is="($formType === 'add' || $formType === 'suggest') && $entity.create_thread">
                            <xf:checkboxrow>
                                <xf:option name="create_thread" value="1"
                                           label="{{ phrase('sylphian_map_create_thread_for_marker') }}"
                                           checked="{{ $entity.create_thread ? true : false }}"
                                           readonly="true"/>
                            </xf:checkboxrow>
                            <xf:else />
                            <xf:checkboxrow>
                                <xf:option name="create_thread" value="1"
                                           label="{{ phrase('sylphian_map_create_thread_for_marker') }}"
                                           checked="{{ $entity.create_thread ? true : false }}" />
                            </xf:checkboxrow>
                        </xf:if>

                        <xf:checkboxrow>
                            <xf:option name="thread_lock" value="1"
                                       label="{{ phrase('sylphian_map_lock_thread_replies') }}"
                                       checked="{{ $entity.thread_lock ? true : false }}"
									   explain="{{ phrase('sylphian_map_thread_lock_explanation') }}" />
                        </xf:checkboxrow>
                    </xf:if>
                </div>
            </li>
			
			<!-- Event Timing Tab -->
			<li role="tabpanel" id="markerTiming">
				<div class="block-body">
					<xf:formrow label="{{ phrase('sylphian_map_start_date_time') }}">
						<div class="inputGroup">
							<xf:datetimeinput name="start_date" value="{{ $entity.start_date }}" />
						</div>
					</xf:formrow>

					<xf:formrow label="{{ phrase('sylphian_map_end_date_time') }}">
						<div class="inputGroup">
							<xf:datetimeinput name="end_date" value="{{ $entity.end_date }}" />
						</div>
					</xf:formrow>

					<xf:inforow>
						{{ phrase('sylphian_map_time_based_markers_explanation') }}
					</xf:inforow>
				</div>
			</li>
        </ul>

        <xf:submitrow sticky="true" icon="save"
                      label="{{ $formType == 'suggest' ? phrase('sylphian_map_suggest_marker') : '' }}" />
    </div>
</xf:form>]]></template>
  <template type="public" title="sylphian_map_suggestion_process" version_id="1000810" version_string="1.0.8 Alpha"><![CDATA[<xf:title>{{ phrase('sylphian_map_suggestion_details') }}</xf:title>

<div class="block-container">
    <h2 class="block-tabHeader tabs" data-xf-init="tabs" role="tablist">
        <a class="tabs-tab is-active" role="tab" tabindex="0" aria-controls="detailsTab">{{ phrase('details') }}</a>
        <a class="tabs-tab" role="tab" tabindex="0" aria-controls="locationTab">{{ phrase('location') }}</a>
        <xf:if is="$suggestion.create_thread">
            <a class="tabs-tab" role="tab" tabindex="0" aria-controls="threadTab">{{ phrase('sylphian_map_thread_options') }}</a>
        </xf:if>
        <xf:if is="$suggestion.start_date && $suggestion.end_date">
            <a class="tabs-tab" role="tab" tabindex="0" aria-controls="eventTab">{{ phrase('sylphian_map_event_timing') }}</a>
        </xf:if>
    </h2>

    <ul class="tabPanes">
        <!-- Details Tab -->
        <li class="is-active" role="tabpanel" id="detailsTab">
            <div class="block-body">
                <xf:formrow label="{{ phrase('title') }}">
                    {{ $suggestion.title }}
                </xf:formrow>
                
                <xf:formrow label="{{ phrase('content') }}">
                    {{ $suggestion.content ?: phrase('none') }}
                </xf:formrow>
                
                <xf:formrow label="{{ phrase('type') }}">
                    {{ $suggestion.type ?: phrase('none') }}
                </xf:formrow>
                
                <xf:formrow label="{{ phrase('sylphian_map_suggested_by') }}">
                    <xf:if is="$suggestion.User">
                        <xf:username user="$suggestion.User" />
                    <xf:else />
                        {{ phrase('unknown') }}
                    </xf:if>
                </xf:formrow>
                
                <xf:formrow label="{{ phrase('sylphian_map_suggested_on') }}">
                    {{ date($suggestion.create_date, 'M j, Y g:i A') }}
                </xf:formrow>
            </div>
        </li>
        
        <!-- Location Tab -->
        <li role="tabpanel" id="locationTab">
            <div class="block-body">
                <xf:formrow label="{{ phrase('sylphian_map_latitude') }}">
                    {{ $suggestion.lat }}
                </xf:formrow>
                
                <xf:formrow label="{{ phrase('sylphian_map_longitude') }}">
                    {{ $suggestion.lng }}
                </xf:formrow>
                
                <xf:formrow label="{{ phrase('preview') }}">
                    <div class="mapPreviewContainer" style="height: 300px; width: 100%;" data-lat="{{ $suggestion.lat }}" data-lng="{{ $suggestion.lng }}" data-icon="{{ $suggestion.icon }}" data-icon-var="{{ $suggestion.icon_var }}" data-icon-color="{{ $suggestion.icon_color }}" data-marker-color="{{ $suggestion.marker_color }}" data-title="{{ $suggestion.title }}">
                        <div id="suggestionMapPreview" data-xf-init="sylphian-map-preview" style="height: 100%; width: 100%;"></div>
                    </div>
                </xf:formrow>
            </div>
        </li>
        
        <!-- Thread Tab -->
        <xf:if is="$suggestion.create_thread">
            <li role="tabpanel" id="threadTab">
                <div class="block-body">
                    <xf:checkboxrow>
                        <xf:option name="create_thread" value="1"
                                  label="{{ phrase('sylphian_map_create_thread_for_marker') }}"
                                  checked="{{$suggestion.create_thread}}"
                                  readonly="true" />
                    </xf:checkboxrow>

                    <xf:checkboxrow>
                        <xf:option name="thread_lock" value="1"
                                  label="{{ phrase('sylphian_map_lock_thread_replies') }}"
                                  checked="{{$suggestion.thread_lock}}"
                                  readonly="true" />
                    </xf:checkboxrow>
                </div>
            </li>
        </xf:if>
        
        <!-- Event Tab -->
        <xf:if is="$suggestion.start_date && $suggestion.end_date">
            <li role="tabpanel" id="eventTab">
                <div class="block-body">
                    <xf:formrow label="{{ phrase('sylphian_map_start_date_time') }}">
                        {{ date($suggestion.start_date, 'M j, Y g:i A') }}
                    </xf:formrow>

                    <xf:formrow label="{{ phrase('sylphian_map_end_date_time') }}">
                        {{ date($suggestion.end_date, 'M j, Y g:i A') }}
                    </xf:formrow>
                </div>
            </li>
        </xf:if>
    </ul>
    
    <div class="block-footer">
		<xf:form action="{{ link('map/approve-suggestion', null, {'suggestion_id': $suggestion.suggestion_id}) }}" ajax="true" class="formSubmitRow">
			<xf:button type="submit" class="button button--primary">
				<xf:fa icon="fa-check" />
				{{ phrase('sylphian_map_approve_suggestion') }}
			</xf:button>
		</xf:form>
                
		<xf:form action="{{ link('map/reject-suggestion', null, {'suggestion_id': $suggestion.suggestion_id}) }}" ajax="true" class="formSubmitRow">
			<xf:button type="submit" class="button button--cta button--negative" icon="delete">
				{{ phrase('sylphian_map_reject_suggestion') }}
			</xf:button>
		</xf:form>
    </div>
</div>

<xf:css src="public:leaflet.less" />
<xf:js src="sylphian/map/leaflet/leaflet.js" min="1" addon="Sylphian/Map" />
<xf:css src="public:leaflet_awesome_markers.less" />
<xf:js src="sylphian/map/leaflet/leaflet.awesome-markers.js" min="1" addon="Sylphian/Map" />

<xf:js src="sylphian/map/suggestion-process.js" min="1" addon="Sylphian/Map" />

<xf:css>
.block-footer {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 10px;
    padding: 10px 0;
}

.formSubmitRow {
    display: inline-flex;
    margin: 0;
}
</xf:css>]]></template>
  <template type="public" title="sylphian_map_suggestions" version_id="1000810" version_string="1.0.8 Alpha"><![CDATA[<xf:title>{{ phrase('sylphian_map_marker_suggestions') }}</xf:title>

<div class="block">
    <div class="block-container">
        <div class="block-body">
            <xf:if is="$pendingSuggestions">
                <xf:datalist>
                    <xf:datarow rowtype="header">
                        <xf:cell>{{ phrase('title') }}</xf:cell>
                        <xf:cell>{{ phrase('type') }}</xf:cell>
                        <xf:cell>{{ phrase('icon') }}</xf:cell>
                        <xf:cell>{{ phrase('position') }}</xf:cell>
                        <xf:cell>{{ phrase('sylphian_map_suggested_by') }}</xf:cell>
                        <xf:cell>{{ phrase('sylphian_map_suggestion_date') }}</xf:cell>
                        <xf:cell></xf:cell>
                    </xf:datarow>
            
                    <xf:foreach loop="$pendingSuggestions" value="$suggestion">
                        <xf:datarow>
                            <xf:main label="{{ $suggestion.title }}" />
                            <xf:cell>{{ $suggestion.type }}</xf:cell>
                            <xf:cell>
                                <xf:fa icon="fa-{{ $suggestion.icon }}" fw="true" /> 
                            </xf:cell>
                            <xf:cell>
                                <span title="{{ $suggestion.lat }}, {{ $suggestion.lng }}">
                                    <xf:fa icon="fa-map-marker-alt" /> {{ $suggestion.lat | number(4) }}, {{ $suggestion.lng | number(4) }}
                                </span>
                            </xf:cell>
                            <xf:cell>
                                <xf:if is="$suggestion.User">
                                    <xf:username user="$suggestion.User" />
                                <xf:else />
                                    {{ phrase('unknown') }}
                                </xf:if>
                            </xf:cell>
                            <xf:cell>
                                {{ date($suggestion.create_date, 'M j, Y g:i A') }}
                            </xf:cell>
							<xf:action href="{{ link('map/process-suggestion', null, {'suggestion_id': $suggestion.suggestion_id}) }}" 
									 overlay="true"
									 title="{{ phrase('sylphian_map_process_suggestion') }}">
								<xf:fa icon="far fa-cog" />
							</xf:action>
                        </xf:datarow>
                    </xf:foreach>
                </xf:datalist>
            <xf:else />
                <div class="block-row">
                    {{ phrase('sylphian_map_no_pending_marker_suggestions') }}
                </div>
            </xf:if>
        </div>
    </div>
</div>

<div style="display: flex; justify-content: center;">
	<xf:pagenav page="{$page}" perpage="{$perPage}" total="{$total}" 
				link="map/suggestion" 
				params="{$pageNavParams}"/>
</div>]]></template>
  <template type="public" title="sylphian_map_widget_events" version_id="1000710" version_string="1.0.7 Alpha"><![CDATA[<div class="block">
    <div class="block-container">
        <h3 class="block-header u-alignCenter">{{ phrase('sylphian_map_events_widget_title') }}</h3>
        <div class="block-body">
            <xf:if is="$events is empty">
                <div class="block-row u-alignCenter">
                    {{ phrase('sylphian_map_no_events') }}
                </div>
            <xf:else />
				<xf:foreach loop="$events" value="$event">
					<xf:macro name="event_marker" arg-event="{{ $event }}" />
				</xf:foreach>
            </xf:if>
        </div>
    </div>
</div>

<xf:macro name="event_marker" arg-event="$event">
    <div class="block-row sylphian-map-event">
        <div class="sylphian-map-event-content">
            <div class="sylphian-map-event-title">
				<xf:fa icon="{{ $event.icon_var }} fa-{{ $event.icon }}" />
				
				<strong>
					<xf:if is="$event.thread_id">
						<a href="{$event.thread_url}" class="sylphian-map-event-link">{$event.title}</a>					
					<xf:else />
						{$event.title}
					</xf:if>
				</strong>
            </div>

			<div class="sylphian-map-event-timeframe">
				Start: {{ date($event.start_date, 'g:i A, M j Y') }}
				<br>
				End: {{ date($event.end_date, 'g:i A, M j Y') }}
			</div>
        </div>
    </div>
</xf:macro>]]></template>
</templates>
